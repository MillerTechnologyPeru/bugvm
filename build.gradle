buildscript {
    ext {
        bugVMVersion = "1.2.4-SNAPSHOT"
        kotlin_version = "1.1.2"
    }
    repositories {
        jcenter()
    }

    dependencies {
        classpath "com.bmuschko:gradle-nexus-plugin:2.3.1"
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.7.0"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlin_version}"
    }
}

allprojects {

    group = "com.bugvm"
    version = bugVMVersion

    apply plugin: "kotlin"
    apply plugin: "maven"
    apply plugin: "signing"
    apply plugin: "com.bmuschko.nexus"

    sourceCompatibility = 1.7
    targetCompatibility = 1.7

    javadoc {
        exclude "**"
    }

    repositories {
        mavenLocal()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
        mavenCentral()
    }

    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib:${kotlin_version}"
    }

    modifyPom {
        project {
            url "https://bugvm.com"

            scm {
                url "https://github.com/bugvm/bugvm"
                connection "scm:git:git://github.com/bugvm/bugvm.git"
                developerConnection "scm:git:ssh://github.com:bugvm/bugvm.git"
            }

            developers {
                developer {
                    id "bugvm"
                    name "We are the BugVM"
                    email "bug@bugvm.com"
                    organization "BugVM"
                    organizationUrl "https://bugvm.com"
                }
            }
        }
    }
}

apply plugin: "io.codearte.nexus-staging"

defaultTasks "install"

task buildJar {
    dependsOn install, build, clean
    install.mustRunAfter build
    build.mustRunAfter clean
}

task buildRT {

    dependsOn ":rt:nativeLib"

}

task buildLLVM {

    dependsOn ":llvm:nativeLib"

}

task All  {

    dependsOn buildJar, buildRT, buildLLVM
    buildJar.mustRunAfter buildLLVM
    buildLLVM.mustRunAfter buildRT

}

task wrapper(type: Wrapper) {
    gradleVersion = "3.4.1"
    distributionType = Wrapper.DistributionType.ALL
}

archivesBaseName = "bugvm-dist"
description = "BugVM Dist Package (tgz)"

dependencies {
    compile project(":compiler")
    compile project(":apple")
    compile project(":rt")
}

task tgzTask(type: Tar) {

    extension = "tgz"
    compression = Compression.GZIP

    into ("bugvm-${version}/bin") {
        from ("bin")
    }

    into("bugvm-${version}/lib") {
        from  "compiler/build/libs/bugvm-compiler-${version}.jar" rename { String fileName -> fileName.replace("bugvm-compiler-${version}.jar", "bugvm-compiler.jar") }
        from("rt/build/libs/bugvm-rt-${version}.jar") rename { String fileName -> fileName.replace("bugvm-rt-${version}.jar", "bugvm-rt.jar") }
        from("apple/build/libs/bugvm-apple-${version}.jar") rename { String fileName -> fileName.replace("bugvm-apple-${version}.jar", "bugvm-apple.jar") }
    }

    into ("bugvm-${version}/lib/vm") {
        from ("rt/vm/binaries")
    }

    into ("bugvm-${version}/modules/licenses/apple") {
        from ("apple/NOTICE.txt")
        from ("apple/LICENSE.txt")
    }

    into ("bugvm-${version}/modules/licenses/llvm") {
        from ("llvm/NOTICE.txt")
        from ("llvm/LICENSE.txt")
    }

    into ("bugvm-${version}/modules/licenses/rt") {
        from ("rt/NOTICE.txt")
        from ("rt/LICENSE.txt")
    }

    into ("bugvm-${version}/modules/licenses/compiler") {
        from ("compiler/NOTICE.txt")
        from ("compiler/LICENSE.txt")
    }

    into ("bugvm-${version}/modules/licenses/vm") {
        from ("vm/NOTICE.txt")
        from ("vm/LICENSE.txt")
    }

    outputs.upToDateWhen { false }
}

artifacts {
    archives tgzTask
}

modifyPom {
    project {
        name project.archivesBaseName
        description project.description
        licenses {
            license {
                name "GNU General Public License, version 2"
                url "https://www.gnu.org/licenses/gpl-2.0.html"
                distribution "repo"
            }
        }
    }
}

task listJars {
    doLast {
        configurations.runtime.each { File file -> println file.name }
    }
}
